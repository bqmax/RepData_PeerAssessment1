with(per_day, hist(`Steps taken per day`,
main = "", breaks = 12, col = "green"))
per_day_imp <- df %>%
group_by(date) %>%
summarise(`Steps taken per day` = sum(imp, na.rm = T))
colors()
par(mfrow = c(1, 2))
with(per_day, hist(`Steps taken per day`,
main = "", breaks = 12, col = "green"))
abline(v = mean(per_day$`Steps taken per day`, na.rm = T),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day$`Steps taken per day`, na.rm = T),
lty = 3, col = "blue", lwd = 2)
with(per_day_int, hist(`Steps taken per day`,
main = "", breaks = 12, col = ""wheat""))
with(per_day_int, hist(`Steps taken per day`,
main = "", breaks = 12, col = "wheat"))
with(per_day_imp, hist(`Steps taken per day`,
main = "", breaks = 12, col = "wheat"))
abline(v = mean(per_day_imp$`Steps taken per day`),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day_imp$`Steps taken per day`),
lty = 3, col = "blue", lwd = 2)
with(per_day_imp, hist(`Steps taken per day`,
main = "After imputation", breaks = 12, col = "wheat"))
par(mfrow = c(1, 2))
with(per_day, hist(`Steps taken per day`,
main = "Before imputation", breaks = 12, col = "green"))
abline(v = mean(per_day$`Steps taken per day`, na.rm = T),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day$`Steps taken per day`, na.rm = T),
lty = 3, col = "blue", lwd = 2)
with(per_day_imp, hist(`Steps taken per day`,
main = "After imputation", breaks = 12, col = "wheat"))
abline(v = mean(per_day_imp$`Steps taken per day`),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day_imp$`Steps taken per day`),
lty = 3, col = "blue", lwd = 2)
library(knitr)
getwd()
setwd("/home/bqmax/Documents/Документы/Coursera/repo")
unzip("./RepData_PeerAssessment1/activity.zip")
df <- read.csv("activity.csv")
par(mar = c(4.1, 4.1, 1.1, 1.1))
per_day <- df %>%
group_by(date) %>%
summarise(`Steps taken per day` = sum(steps, na.rm = T))
with(per_day, hist(`Steps taken per day`,
main = "", breaks = 12, col = "green"))
abline(v = mean(per_day$`Steps taken per day`, na.rm = T),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day$`Steps taken per day`, na.rm = T),
lty = 3, col = "blue", lwd = 2)
with(per_day, hist(`Steps taken per day`,
main = "", breaks = 12, col = "green"))
abline(v = mean(per_day$`Steps taken per day`, na.rm = T),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day$`Steps taken per day`, na.rm = T),
lty = 3, col = "blue", lwd = 2)
## What is mean total number of steps taken per day?
par(mar = c(4.1, 4.1, 1.1, 1.1))
per_day <- df %>%
group_by(date) %>%
summarise(`Steps taken per day` = sum(steps, na.rm = T))
with(per_day, hist(`Steps taken per day`,
main = "", breaks = 12, col = "green"))
## What is mean total number of steps taken per day?
par(mfrow = c(1,1), mar = c(4.1, 4.1, 1.1, 1.1))
per_day <- df %>%
group_by(date) %>%
summarise(`Steps taken per day` = sum(steps, na.rm = T))
with(per_day, hist(`Steps taken per day`,
main = "", breaks = 12, col = "green"))
abline(v = mean(per_day$`Steps taken per day`, na.rm = T),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day$`Steps taken per day`, na.rm = T),
lty = 3, col = "blue", lwd = 2)
with(per_int, plot(`5-minute interval`, `Average number of steps`, type = "l"))
points(x = per_int$`5-minute interval`[which.max(per_int$`Average number of steps`)],
y = max(per_int$`Average number of steps`, na.rm = T),
pch = 20, cex = 0.7, col = "red")
per_int$`5-minute interval`[which.max(per_int$`Average number of steps`)]
getwd()
setwd("/home/bqmax/Documents/Документы/Coursera/repo/RepData_PeerAssessment1/")
per_int$`5-minute interval`[which.max(per_int$`Average number of steps`)]
df <- read.csv("activity.csv")
df$date <- as.Date(df$date, format = "%Y-%m-%d")
df$weekday <- weekdays(df$date)
## What is mean total number of steps taken per day?
par(mfrow = c(1,1), mar = c(4.1, 4.1, 1.1, 1.1))
per_day <- df %>%
group_by(date) %>%
summarise(`Steps taken per day` = sum(steps, na.rm = T))
## Histogram
with(per_day, hist(`Steps taken per day`,
main = "", breaks = 12, col = "green"))
abline(v = mean(per_day$`Steps taken per day`, na.rm = T),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day$`Steps taken per day`, na.rm = T),
lty = 3, col = "blue", lwd = 2)
## Descriptive
mean(per_day$`Steps taken per day`, na.rm = T)
median(per_day$`Steps taken per day`, na.rm = T)
## Time series plot
per_int <- df %>%
mutate(`5-minute interval` = interval) %>%
group_by(`5-minute interval`) %>%
summarise(`Average number of steps` = mean(steps, na.rm = T))
with(per_int, plot(`5-minute interval`, `Average number of steps`, type = "l"))
points(x = per_int$`5-minute interval`[which.max(per_int$`Average number of steps`)],
y = max(per_int$`Average number of steps`, na.rm = T),
pch = 20, cex = 0.7, col = "red")
per_int$`5-minute interval`[which.max(per_int$`Average number of steps`)]
## Imputing missing values using the median for that 5-minute interval
df$imp <- unlist(tapply(df$steps, df$interval,
function(x) ifelse(is.na(x), median(x, na.rm = T), x)))
per_day_imp <- df %>%
group_by(date) %>%
summarise(`Steps taken per day` = sum(imp, na.rm = T))
par(mfrow = c(1, 2))
with(per_day, hist(`Steps taken per day`,
main = "Before imputation", breaks = 12, col = "green"))
abline(v = mean(per_day$`Steps taken per day`, na.rm = T),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day$`Steps taken per day`, na.rm = T),
lty = 3, col = "blue", lwd = 2)
with(per_day_imp, hist(`Steps taken per day`,
main = "After imputation", breaks = 12, col = "wheat"))
abline(v = mean(per_day_imp$`Steps taken per day`),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day_imp$`Steps taken per day`),
lty = 3, col = "blue", lwd = 2)
labels(df$weekday)
unique(df$weekday)
df$week <- ifelse(df$weekday %in% unique(df$weekday)[1:5], "Weekday", "Weekend")
unique(weekdays(df$date))
df$week <- ifelse(weekdays(df$date) %in% unique(weekdays(df$date))[1:5], "Weekday", "Weekend")
library(lattice)
per_day_imp <- df %>%
group_by(interval) %>%
mutate(steps = unlist(tapply(df$steps, df$interval,
function(x) ifelse(is.na(x),
median(x, na.rm = T), x)))) %>%
group_by(date) %>%
summarise(`Steps taken per day` = sum(steps, na.rm = T))
per_day_imp <- df %>%
group_by(interval) %>%
mutate(steps = unlist(tapply(df$steps, df$interval,
function(x) ifelse(is.na(x),
median(x, na.rm = T), x))))
per_day_imp <- df %>%
group_by(interval) %>%
mutate(steps = unlist(tapply(dsteps, interval,
function(x) ifelse(is.na(x),
median(x, na.rm = T), x))))
per_day_imp <- df %>%
group_by(interval) %>%
mutate(steps = unlist(tapply(steps, interval,
function(x) ifelse(is.na(x),
median(x, na.rm = T), x))))
per_day_imp <- df %>%
group_by(interval) %>%
mutate(steps = unlist(tapply(steps, interval,
function(x) ifelse(is.na(x),
median(x, na.rm = T), x)))) %>%
group_by(date) %>%
summarise(`Steps taken per day` = sum(steps, na.rm = T))
par(mfrow = c(1, 2))
with(per_day, hist(`Steps taken per day`,
main = "Before imputation", breaks = 12, col = "green"))
abline(v = mean(per_day$`Steps taken per day`, na.rm = T),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day$`Steps taken per day`, na.rm = T),
lty = 3, col = "blue", lwd = 2)
with(per_day_imp, hist(`Steps taken per day`,
main = "After imputation", breaks = 12, col = "wheat"))
abline(v = mean(per_day_imp$`Steps taken per day`),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day_imp$`Steps taken per day`),
lty = 3, col = "blue", lwd = 2)
per_day_imp <- df %>%
group_by(interval) %>%
mutate(steps = unlist(tapply(steps, interval,
function(x) ifelse(is.na(x),
median(x, na.rm = T), x))))
View(per_day_imp)
sum(is.na(per_day_imp$steps))
per_day_imp <- df %>%
group_by(interval) %>%
mutate(steps = unlist(tapply(steps, interval,
function(x) ifelse(is.na(x),
median(x, na.rm = T), x)))) %>%
group_by(date) %>%
summarise(`Steps taken per day` = sum(steps, na.rm = T))
median(per_day$`Steps taken per day`, na.rm = T)
median(per_day_imp$`Steps taken per day`)
mean(per_day$`Steps taken per day`, na.rm = T)
mean(per_day_imp$`Steps taken per day`)
unlist(tapply(df$steps, df$interval,
function(x) ifelse(is.na(x), median(x, na.rm = T), x)))
## Imputing missing values using the median for that 5-minute interval
a <- unlist(tapply(df$steps, df$interval,
function(x) ifelse(is.na(x), median(x, na.rm = T), x)))
mean(a)
per_day_imp <- df %>%
group_by(interval) %>%
mutate(steps = unlist(tapply(steps, interval,
function(x) ifelse(is.na(x),
median(x, na.rm = T), x))))
median(df$steps[df$interval == 25])
median(df$steps[df$interval == 25], na.rm = T)
View(per_day_imp)
df[, df$interval == 25]
df[, df$interval[df$interval == 25]]
df[df$interval == 25,]
median(df$steps[df$interval == 36], na.rm = T)
median(df$steps[df$interval == 36], na.rm = T)
per_day_imp[per_day_imp$interval == 25,]
View(per_day_imp)
per_day_imp[per_day_imp$interval == 25, c(1,3,5)]
df <- read.csv("activity.csv")
df$date <- as.Date(df$date, format = "%Y-%m-%d")
per_day_imp <- df %>%
group_by(interval) %>%
mutate(steps = unlist(tapply(steps, interval,
function(x) ifelse(is.na(x),
median(x, na.rm = T), x))))
median(df$steps[df$interval == 36], na.rm = T)
median(df$steps[df$interval == 45], na.rm = T)
median(df$steps[df$interval == 125], na.rm = T)
View(df)
median(df$steps[df$interval == 1025], na.rm = T)
median(df$steps[df$interval == 1030], na.rm = T)
median(df$steps[df$interval == 1035], na.rm = T)
median(df$steps[df$interval == 1040], na.rm = T)
mean(df$steps[df$interval == 1040], na.rm = T)
per_day_imp <- df %>%
group_by(interval) %>%
mutate(steps = unlist(tapply(steps, interval,
function(x) ifelse(is.na(x),
mean(x, na.rm = T), x))))
mean(df$steps[df$interval == 1040], na.rm = T)
per_day_imp[per_day_imp$interval == 1040, c(1,3,5)]
df <- read.csv("activity.csv")
df$date <- as.Date(df$date, format = "%Y-%m-%d")
per_day_imp <- df %>%
group_by(interval) %>%
mutate(steps1 = unlist(tapply(steps, interval,
function(x) ifelse(is.na(x),
mean(x, na.rm = T), x))))
mean(df$steps[df$interval == 1040], na.rm = T)
per_day_imp[per_day_imp$interval == 1040, c(1,3,5)]
df <- read.csv("activity.csv")
df$date <- as.Date(df$date, format = "%Y-%m-%d")
per_day_imp <- df %>%
group_by(interval) %>%
mutate(steps1 = unlist(tapply(steps, interval,
function(x) ifelse(is.na(x),
mean(x, na.rm = T), x))))# %>%
View(per_day_imp)
mean(df$steps[df$interval == 1040], na.rm = T)
per_day_imp[per_day_imp$interval == 1040, c(1,3,4)]
mean(df$steps[df$interval == 1035], na.rm = T)
per_day_imp[per_day_imp$interval == 1035, c(1,3,4)]
mean(df$steps[df$interval == 100], na.rm = T)
per_day_imp[per_day_imp$interval == 100, c(1,3,4)]
per_day_imp <- df %>%
group_by(interval) %>%
mutate(steps1 = unlist(tapply(steps, interval,
function(x) ifelse(is.na(x),
mean(x, na.rm = T), x)))) %>%
group_by(date) %>%
summarise(`Steps taken per day` = sum(steps, na.rm = T))
par(mfrow = c(1, 2))
with(per_day, hist(`Steps taken per day`,
main = "Before imputation", breaks = 12, col = "green"))
abline(v = mean(per_day$`Steps taken per day`, na.rm = T),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day$`Steps taken per day`, na.rm = T),
lty = 3, col = "blue", lwd = 2)
with(per_day_imp, hist(`Steps taken per day`,
main = "After imputation", breaks = 12, col = "wheat"))
abline(v = mean(per_day_imp$`Steps taken per day`),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day_imp$`Steps taken per day`),
lty = 3, col = "blue", lwd = 2)
mean(per_day$`Steps taken per day`, na.rm = T)
mean(per_day_imp$`Steps taken per day`)
median(per_day$`Steps taken per day`, na.rm = T)
median(per_day_imp$`Steps taken per day`)
library(lattice)
df$week1 <- weekdays(df$date)
df$week2 <- ifelse(weekdays(df$date) %in% unique(weekdays(df$date))[1:5], "Weekday", "Weekend")
df %>%
group_by(interval, week1)
df %>%
group_by(interval, week1) %>%
summarise(`Mumber of steps` = mean(steps, na.rm = T))
per_weekday <- df %>%
group_by(interval, week1) %>%
summarise(`Number of steps` = mean(steps, na.rm = T))
per_weekday
xyplot(`Number of steps` ~ interval)
xyplot(`Number of steps` ~ interval, data = per_weekday)
xyplot(`Number of steps` ~ interval, data = per_weekday, type = "l")
df <- read.csv("activity.csv")
df$date <- as.Date(df$date, format = "%Y-%m-%d")
rm(list = ls())
df <- read.csv("activity.csv")
df$date <- as.Date(df$date, format = "%Y-%m-%d")
## What is mean total number of steps taken per day?
par(mfrow = c(1,1), mar = c(4.1, 4.1, 1.1, 1.1))
per_day <- df %>%
group_by(date) %>%
summarise(`Number of steps` = sum(steps, na.rm = T))
with(per_day, hist(`Number of steps`,
main = "", breaks = 12, col = "green"))
abline(v = mean(per_day$`Number of steps`, na.rm = T),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day$`Number of steps`, na.rm = T),
lty = 3, col = "blue", lwd = 2)
df %>%
mutate(`5-minute interval` = interval) %>%
group_by(`5-minute interval`, date)
df %>%
mutate(interval = `5-minute interval`) %>%
group_by(`5-minute interval`, date)
df %>%
rename(`5-minute interval` = interval) %>%
group_by(`5-minute interval`, date)
df %>%
rename(`5-minute interval` = interval) %>%
group_by(date, `5-minute interval`)
df %>%
rename(`5-minute interval` = interval) %>%
group_by(`5-minute interval`, date)
df %>%
rename(`5-minute interval` = interval) %>%
group_by(`5-minute interval`, date) %>%
summarise(`Number of steps` = mean(steps, na.rm = T))
xyplot(`Number of steps` ~ `5-minute interval`, data = per_int)
per_int <- df %>%
rename(`5-minute interval` = interval) %>%
group_by(`5-minute interval`, date) %>%
summarise(`Number of steps` = mean(steps, na.rm = T))
df %>%
rename(`5-minute interval` = interval) %>%
group_by(`5-minute interval`, date)
df %>%
rename(`5-minute interval` = interval) %>%
group_by(`5-minute interval`, date) %>%
summarise(`Number of steps` = mean(steps, na.rm = T))
df %>%
rename(`5-minute interval` = interval) %>%
group_by(`5-minute interval`, date)
length(unique(df$date))
df %>%
rename(`5-minute interval` = interval) %>%
group_by(`5-minute interval`, date) %>%
summarise(`Number of steps` = mean(steps, na.rm = T))
df %>%
rename(`5-minute interval` = interval) %>%
group_by(`5-minute interval`, date)
df %>%
rename(`5-minute interval` = interval) %>%
group_by(`5-minute interval`, date) %>%
summarise(`Number of steps` = mean(steps, na.rm = T))
df %>%
group_by(interval, date) %>%
summarise(`Number of steps` = mean(steps, na.rm = T))
## Time series plot
per_int <- df %>%
mutate(interval = as.factor(interval))
df %>%
mutate(interval = as.factor(interval))+
group_by(interval, date)
df %>%
mutate(interval = as.factor(interval))+
group_by(interval, date)
df %>%
mutate(interval1 = as.factor(interval))+
group_by(interval1, date)
df %>%
mutate(as.factor(interval))+
group_by(interval, date)
df %>%
mutate(factor(interval))+
group_by(interval, date)
df %>%
mutate(interval = as.factor(interval) %>%
group_by(interval, date)
df %>%
mutate(interval = as.factor(interval)) %>%
group_by(interval, date)
df %>%
mutate(interval = as.factor(interval)) %>%
group_by(interval, date) %>%
summarise(`Number of steps` = mean(steps, na.rm = T))
df %>%
mutate(interval = as.factor(interval),
date = as.factor(date)) %>%
group_by(interval, date) %>%
summarise(`Number of steps` = mean(steps, na.rm = T))
df %>%
rename(`5-minute interval` = interval) %>%
group_by(`5-minute interval`)
df %>%
rename(`5-minute interval` = interval) %>%
group_by(`5-minute interval`) %>%
summarise(`Number of steps` = mean(steps, na.rm = T))
xyplot(`Number of steps` ~ `5-minute interval`, data = per_int)
per_int <- df %>%
rename(`5-minute interval` = interval) %>%
group_by(`5-minute interval`) %>%
summarise(`Number of steps` = mean(steps, na.rm = T))
xyplot(`Number of steps` ~ `5-minute interval`, data = per_int)
xyplot(`Number of steps` ~ `5-minute interval`, data = per_int, type = "l")
per_int$`5-minute interval`[which.max(per_int$`Number of steps`)]
max(per_int$`Number of steps`)
df1 <- df %>%
group_by(date) %>%
mutate(steps = unlist(tapply(steps, date,
function(x) ifelse(is.na(x),
mean(x, na.rm = T), x))))
View(df1)
df %>%
group_by(date)
df1 <- df %>%
group_by(date)
View(df1)
df1 <- df %>%
group_by(interval) %>%
mutate(steps = unlist(tapply(steps, interval,
function(x) ifelse(is.na(x),
mean(x, na.rm = T), x))))
sum(is.na(df1$steps))
## Imputing missing values using the mean for that 5-minute interval
sum(is.na(df$steps))
per_day_imp <- df1 %>%
group_by(date) %>%
summarise(`Number of steps` = sum(steps))
par(mfrow = c(1, 2))
with(per_day, hist(`Number of steps`,
main = "Before imputation", breaks = 12, col = "green"))
abline(v = mean(per_day$`Number of steps`, na.rm = T),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day$`Number of steps`, na.rm = T),
lty = 3, col = "blue", lwd = 2)
with(per_day_imp, hist(`Number of steps`,
main = "After imputation", breaks = 12, col = "wheat"))
abline(v = mean(per_day_imp$`Number of steps`),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day_imp$`Number of steps`),
lty = 3, col = "blue", lwd = 2)
mean(per_day$`Number of steps`, na.rm = T)
df %>%
group_by(date)
per_day <- df %>%
group_by(interval) %>%
summarise(`Number of steps` = sum(steps, na.rm = T))
## Histogram
with(per_day, hist(`Number of steps`,
main = "", breaks = 12, col = "green"))
per_day <- df %>%
group_by(date) %>%
summarise(`Number of steps` = sum(steps, na.rm = T))
## Histogram
with(per_day, hist(`Number of steps`,
main = "", breaks = 12, col = "green"))
abline(v = mean(per_day$`Number of steps`, na.rm = T),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day$`Number of steps`, na.rm = T),
lty = 3, col = "blue", lwd = 2)
## What is mean total number of steps taken per day?
par(mfrow = c(1,1), mar = c(4.1, 4.1, 1.1, 1.1))
per_day <- df %>%
group_by(date) %>%
summarise(`Number of steps` = sum(steps, na.rm = T))
## Histogram
with(per_day, hist(`Number of steps`,
main = "", breaks = 12, col = "green"))
abline(v = mean(per_day$`Number of steps`, na.rm = T),
lty = 2, col = "red", lwd = 2)
abline(v = median(per_day$`Number of steps`, na.rm = T),
lty = 3, col = "blue", lwd = 2)
mean(per_day$`Number of steps`, na.rm = T)
median(per_day$`Number of steps`, na.rm = T)
mean(per_day$`Number of steps`, na.rm = T)
mean(per_day_imp$`Number of steps`)
median(per_day$`Number of steps`, na.rm = T)
median(per_day_imp$`Number of steps`)
df1$week <- ifelse(weekdays(df$date) %in% unique(weekdays(df$date))[1:5], "Weekday", "Weekend")
View(df1)
df1 %>%
rename(`5-minute interval` = interval) %>%
group_by(week, `5-minute interval`) %>%
summarise(`Number of steps` = mean(steps))
per_week <- df1 %>%
rename(`5-minute interval` = interval) %>%
group_by(week, `5-minute interval`) %>%
summarise(`Number of steps` = mean(steps))
xyplot(`Number of steps` ~ `5-minute interval` | week, data = per_wee, type = "l")
xyplot(`Number of steps` ~ `5-minute interval` | week, data = per_week, type = "l")
xyplot(`Number of steps` ~ `5-minute interval` | week,
data = per_week, type = "l", layout = c(1,2))
library(knitr)
opts_chunk$set(message = FALSE)
opts_chunk$set(message = FALSE)
opts_chunk$set(message = FALSE)
opts_chunk$set(message = FALSE)
opts_chunk$set(message = FALSE)
source('~/Documents/Документы/Coursera/repo/RepData_PeerAssessment1/script.R')
